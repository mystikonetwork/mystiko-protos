syntax = "proto3";

package mystiko.sequencer.v1;

import "mystiko/data/v1/commitment.proto";
import "mystiko/data/v1/nullifier.proto";

message FetchContractRequest {
  bytes    contract_address    = 1;
  optional uint64 start_block  = 2;
  optional uint64 target_block = 3;
}

message FetchContractResponse {
  bytes    contract_address                       = 1;
  uint64   start_block                            = 2;
  uint64   end_block                              = 3;
  repeated mystiko.data.v1.Commitment commitments = 5;
  repeated mystiko.data.v1.Nullifier  nullifiers  = 6;
}

message FetchChainRequest {
  uint64   chain_id                       = 1;
  uint64   start_block                    = 2;
  uint64   target_block                   = 3;
  optional bool is_full                   = 4;
  repeated FetchContractRequest contracts = 5;
}

message FetchChainResponse {
  uint64   chain_id                        = 1;
  repeated FetchContractResponse contracts = 3;
}

message HealthCheckRequest {}

message HealthCheckResponse {}

service SequencerService {
  rpc FetchChain(FetchChainRequest)                           returns (FetchChainResponse);
  rpc HealthCheck(HealthCheckRequest)                         returns (HealthCheckResponse);
}