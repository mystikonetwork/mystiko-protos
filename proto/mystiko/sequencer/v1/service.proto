syntax = "proto3";

package mystiko.sequencer.v1;

import "mystiko/data/v1/commitment.proto";
import "mystiko/data/v1/nullifier.proto";

message FetchContractRequest {
  bytes    contract_address    = 1;
  optional uint64 start_block  = 2;
  optional uint64 target_block = 3;
}

message FetchContractResponse {
  bytes    contract_address                       = 1;
  uint64   start_block                            = 2;
  uint64   end_block                              = 3;
  repeated mystiko.data.v1.Commitment commitments = 5;
  repeated mystiko.data.v1.Nullifier  nullifiers  = 6;
}

message FetchChainRequest {
  uint64   chain_id                       = 1;
  uint64   start_block                    = 2;
  uint64   target_block                   = 3;
  optional bool is_full                   = 4;
  repeated FetchContractRequest contracts = 5;
}

message FetchChainResponse {
  uint64   chain_id                        = 1;
  repeated FetchContractResponse contracts = 3;
}

message ChainLoadedBlockRequest {
  uint64   chain_id            = 1;
  optional bool with_contracts = 2;
}

message ChainLoadedBlockResponse {
  uint64   chain_id                              = 1;
  uint64   block_number                          = 2;
  repeated ContractLoadedBlockResponse contracts = 3;
}

message ContractLoadedBlockRequest {
  uint64 chain_id         = 1;
  bytes  contract_address = 2;
}

message ContractLoadedBlockResponse {
  uint64 chain_id         = 1;
  bytes  contract_address = 2;
  uint64 block_number     = 3;
}

message GetCommitmentsRequest {
  uint64   chain_id                = 1;
  bytes    contract_address        = 2;
  repeated bytes commitment_hashes = 3;
}

message GetCommitmentsResponse {
  uint64   chain_id                               = 1;
  bytes    contract_address                       = 2;
  repeated mystiko.data.v1.Commitment commitments = 3;
}

message GetCommitmentsByTxHashRequest {
  uint64   chain_id            = 1;
  bytes    tx_hash             = 3;
}

message GetCommitmentsByTxHashResponse {
  repeated mystiko.data.v1.Commitment commitments = 1;
}

message GetNullifiersRequest {
  uint64   chain_id               = 1;
  bytes    contract_address       = 2;
  repeated bytes nullifier_hashes = 3;
}

message GetNullifiersByTxHashRequest {
  uint64   chain_id            = 1;
  bytes    tx_hash             = 3;
}

message GetNullifiersByTxHashResponse {
  repeated mystiko.data.v1.Nullifier nullifiers = 1;
}

message GetNullifiersResponse {
  uint64   chain_id                             = 1;
  bytes    contract_address                     = 2;
  repeated mystiko.data.v1.Nullifier nullifiers = 3;
}

message HealthCheckRequest {}

message HealthCheckResponse {}

service SequencerService {
  rpc FetchChain(FetchChainRequest)                         returns (FetchChainResponse);
  rpc ChainLoadedBlock(ChainLoadedBlockRequest)             returns (ChainLoadedBlockResponse);
  rpc ContractLoadedBlock(ContractLoadedBlockRequest)       returns (ContractLoadedBlockResponse);
  rpc GetCommitments(GetCommitmentsRequest)                 returns (GetCommitmentsResponse);
  rpc GetCommitmentsByTxHash(GetCommitmentsByTxHashRequest) returns (GetCommitmentsByTxHashResponse);
  rpc GetNullifiers(GetNullifiersRequest)                   returns (GetNullifiersResponse);
  rpc GetNullifiersByTxHash(GetNullifiersByTxHashRequest)   returns (GetNullifiersByTxHashResponse);
  rpc HealthCheck(HealthCheckRequest)                       returns (HealthCheckResponse);
}
