syntax = "proto3";

package mystiko.sequencer.v1;

import "mystiko/data/v1/commitment.proto";
import "mystiko/data/v1/nullifier.proto";

message FetchContractRequest {
  bytes    contract_address    = 1;
  optional uint64 start_block  = 2;
  optional uint64 target_block = 3;
}

message FetchContractResponse {
  bytes    contract_address                       = 1;
  uint64   start_block                            = 2;
  uint64   end_block                              = 3;
  repeated mystiko.data.v1.Commitment commitments = 5;
  repeated mystiko.data.v1.Nullifier  nullifiers  = 6;
}

message FetchChainRequest {
  uint64   chain_id                       = 1;
  uint64   start_block                    = 2;
  uint64   target_block                   = 3;
  optional bool is_full                   = 4;
  repeated FetchContractRequest contracts = 5;
}

message FetchChainResponse {
  uint64   chain_id                        = 1;
  repeated FetchContractResponse contracts = 3;
}

message QueryContractCommitmentRequest {
  uint64 chain_id                                  = 1;
  bytes  contract_address                          = 2;
  uint64 end_block                                 = 3;
  repeated bytes  commitment_hashes                = 4;
  optional uint64 start_block                      = 5;
  optional mystiko.data.v1.CommitmentStatus status = 6;
}

message QueryContractCommitmentResponse {
  uint64   end_block                              = 1;
  repeated mystiko.data.v1.Commitment commitments = 3;
}

message QueryContractNullifierRequest {
  uint64 chain_id                  = 1;
  bytes  contract_address          = 2;
  uint64 end_block                 = 3;
  repeated bytes  nullifier_hashes = 4;
  optional uint64 start_block      = 5;
}

message QueryContractNullifierResponse {
  uint64   end_block                              = 1;
  repeated mystiko.data.v1.Nullifier nullifiers   = 3;
}

message CountContractCommitmentRequest {
  uint64 chain_id                                  = 1;
  bytes  contract_address                          = 2;
  uint64 end_block                                 = 3;
  repeated bytes  commitment_hashes                = 4;
  optional uint64 start_block                      = 5;
  optional mystiko.data.v1.CommitmentStatus status = 6;
}

message CountContractCommitmentResponse {
  uint64   end_block   = 1;
  uint64   count       = 2;
}

message CountContractNullifierRequest {
  uint64 chain_id                  = 1;
  bytes  contract_address          = 2;
  uint64 end_block                 = 3;
  repeated bytes  nullifier_hashes = 4;
  optional uint64 start_block      = 5;
}

message CountContractNullifierResponse {
  uint64   end_block   = 1;
  uint64   count       = 2;
}

message ChainLoadedBlockRequest {
  uint64 chain_id = 1;
}

message ChainLoadedBlockResponse {
  uint64   chain_id     = 1;
  uint64   block_number = 2;
}

message ContractLoadedBlockRequest {
  uint64 chain_id         = 1;
  bytes  contract_address = 2;
}

message ContractLoadedBlockResponse {
  uint64   chain_id         = 1;
  bytes    contract_address = 2;
  uint64   block_number     = 3;
}

message HealthCheckRequest {}

message HealthCheckResponse {}

service SequencerService {
  rpc FetchChain(FetchChainRequest)                           returns (FetchChainResponse);
  rpc QueryContractCommitment(QueryContractCommitmentRequest) returns (QueryContractCommitmentResponse);
  rpc CountContractCommitment(CountContractCommitmentRequest) returns (CountContractCommitmentResponse);
  rpc QueryContractNullifier(QueryContractNullifierRequest)   returns (QueryContractNullifierResponse);
  rpc CountContractNullifier(CountContractNullifierRequest)   returns (CountContractNullifierResponse);
  rpc ChainLoadedBlock(ChainLoadedBlockRequest)               returns (ChainLoadedBlockResponse);
  rpc ContractLoadedBlock(ContractLoadedBlockRequest)         returns (ContractLoadedBlockResponse);
  rpc HealthCheck(HealthCheckRequest)                         returns (HealthCheckResponse);
}