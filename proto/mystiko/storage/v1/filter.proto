syntax = "proto3";

package mystiko.storage.v1;

enum SubFilterOperator {
  SUB_FILTER_OPERATOR_IS_NULL       = 0;
  SUB_FILTER_OPERATOR_IS_NOT_NULL   = 1;
  SUB_FILTER_OPERATOR_EQUAL         = 2;
  SUB_FILTER_OPERATOR_NOT_EQUAL     = 3;
  SUB_FILTER_OPERATOR_GREATER       = 4;
  SUB_FILTER_OPERATOR_GREATER_EQUAL = 5;
  SUB_FILTER_OPERATOR_LESS          = 6;
  SUB_FILTER_OPERATOR_LESS_EQUAL    = 7;
  SUB_FILTER_OPERATOR_BETWEEN_AND   = 8;
  SUB_FILTER_OPERATOR_IN            = 9;
}

enum ColumnValueType {
  COLUMN_VALUE_TYPE_BOOL      = 0;
  COLUMN_VALUE_TYPE_CHAR      = 1;
  COLUMN_VALUE_TYPE_I8        = 2;
  COLUMN_VALUE_TYPE_I16       = 3;
  COLUMN_VALUE_TYPE_I32       = 4;
  COLUMN_VALUE_TYPE_I64       = 5;
  COLUMN_VALUE_TYPE_I128      = 6;
  COLUMN_VALUE_TYPE_ISIZE     = 7;
  COLUMN_VALUE_TYPE_U8        = 8;
  COLUMN_VALUE_TYPE_U16       = 9;
  COLUMN_VALUE_TYPE_U32       = 10;
  COLUMN_VALUE_TYPE_U64       = 11;
  COLUMN_VALUE_TYPE_U128      = 12;
  COLUMN_VALUE_TYPE_USIZE     = 13;
  COLUMN_VALUE_TYPE_F32       = 14;
  COLUMN_VALUE_TYPE_F64       = 15;
  COLUMN_VALUE_TYPE_STRING    = 16;
  COLUMN_VALUE_TYPE_BIG_INT   = 17;
  COLUMN_VALUE_TYPE_BIG_UINT  = 18;
  COLUMN_VALUE_TYPE_JSON      = 19;
}

enum ConditionOperator {
  CONDITION_OPERATOR_AND = 0;
  CONDITION_OPERATOR_OR  = 1;
}

enum Order {
  ORDER_ASC   = 0;
  ORDER_DESC  = 1;
}

message ColumnValue {
  ColumnValueType type      = 1;
  oneof value {
    bool    bool_value      = 2;
    string  char_value      = 3;
    sint32  i8_value        = 4;
    sint32  i16_value       = 5;
    sint32  i32_value       = 6;
    sint64  i64_value       = 7;
    bytes   i128_value      = 8;
    sint32  isize_value     = 9;
    uint32  u8_value        = 10;
    uint32  u16_value       = 11;
    uint32  u32_value       = 12;
    uint64  u64_value       = 13;
    bytes   u128_value      = 14;
    uint32  usize_value     = 15;
    float   f32_value       = 16;
    double  f64_value       = 17;
    string  string_value    = 18;
    sint64  big_int_value   = 19;
    uint64  big_uint_value  = 20;
    string  json_value      = 21;
  }
}

message SubFilter {
  SubFilterOperator operator           = 1;
  string            column             = 2;
  repeated          ColumnValue values = 3;
}

message Condition {
  ConditionOperator operator              = 1;
  repeated          SubFilter sub_filters = 2;
}

message OrderBy {
  repeated  string  columns = 1;
  Order     order           = 2;
}

message QueryFilter {
  repeated Condition  conditions          = 1;
  ConditionOperator   conditions_operator = 2;
  optional uint64     limit               = 3;
  optional uint64     offset              = 4;
  optional OrderBy    order_by            = 5;
}