syntax = "proto3";

package mystiko.loader.v1;

import "mystiko/common/v1/types.proto";
import "mystiko/service/v1/client.proto";

enum FetcherType {
  FETCHER_TYPE_UNSPECIFIED = 0;
  FETCHER_TYPE_PACKER      = 1;
  FETCHER_TYPE_SEQUENCER   = 2;
  FETCHER_TYPE_ETHERSCAN   = 3;
  FETCHER_TYPE_PROVIDER    = 4;
}

message FetcherConfig {
  optional PackerFetcherConfig    packer    = 1;
  optional SequencerFetcherConfig sequencer = 2;
  optional EtherscanFetcherConfig etherscan = 3;
  optional ProviderFetcherConfig  provider  = 4;
}

message EtherscanFetcherConfig {
  optional uint32                          concurrency = 1;
  map<uint64, EtherscanFetcherChainConfig> chains      = 2;
  optional bool skip_validation                        = 3;
  optional uint32 target_block_priority                = 4;
}

message EtherscanFetcherChainConfig {
  optional string url                     = 1;
  optional string api_key                 = 2;
  optional uint64 max_requests_per_second = 3;
  optional uint64 page_size               = 4;
  optional string url_prefix              = 5;
  optional uint64 delay_num_blocks        = 6;
}

message ProviderFetcherConfig {
  optional uint32                        concurrency = 1;
  optional uint64                        timeout_ms  = 2;
  map<uint64,ProviderFetcherChainConfig> chains      = 3;
  optional bool skip_validation                      = 4;
  optional uint32 target_block_priority              = 5;
}

message ProviderFetcherChainConfig {
  map<uint32, string>                     urls             = 1;
  optional uint64                         delay_num_blocks = 2;
  optional mystiko.common.v1.ProviderType provider_type    = 3;
}

message PackerFetcherConfig {
  optional bool skip_validation         = 1;
  optional uint32 target_block_priority = 2;
}

message SequencerFetcherConfig {
  optional bool skip_validation                     = 1;
  optional uint32 target_block_priority             = 2;
  optional mystiko.service.v1.ClientOptions options = 3;
}